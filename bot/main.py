import os
import asyncio
from loguru import logger
from datetime import datetime
from typing import Optional

# Telegram
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ Koyeb
DRY_RUN = os.getenv("DRY_RUN", "true").lower() == "true"

# –ó–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API –±–∏—Ä–∂–∏ (–Ω–∞ –±—É–¥—É—â–µ–µ)
API_KEY = os.getenv("MEXC_API_KEY", "")
API_SECRET = os.getenv("MEXC_API_SECRET", "")

# –ì–ª–æ–±–∞–ª—å–Ω–æ –¥–µ—Ä–∂–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram app
tg_app: Optional[Application] = None


async def tg_send(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω CHAT_ID)."""
    if not tg_app:
        logger.warning("Telegram app is not ready yet")
        return
    chat_id = TELEGRAM_CHAT_ID
    if not chat_id:
        logger.warning("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    try:
        await tg_app.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.exception(f"Failed to send Telegram message: {e}")


# ===== Handlers =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï—Å–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å."""
    user_chat_id = update.effective_chat.id if update.effective_chat else None
    msg = [
        "ü§ñ *mybot9* –≥–æ—Ç–æ–≤.",
        f"DRY_RUN: *{DRY_RUN}*",
    ]
    if TELEGRAM_CHAT_ID:
        msg.append(f"–û—Ç—á—ë—Ç—ã —à–ª—ë–º –≤: `{TELEGRAM_CHAT_ID}`")
    else:
        msg.append(
            "–ü–æ—Ö–æ–∂–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è `TELEGRAM_CHAT_ID` –Ω–µ –∑–∞–¥–∞–Ω–∞.\n"
            f"–¢–≤–æ–π chat_id: `{user_chat_id}` ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ Koyeb ‚Üí Settings ‚Üí Environment variables."
        )
    await update.message.reply_text("\n".join(msg), parse_mode=ParseMode.MARKDOWN)


async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üèì pong")


# ===== –ü—Ä–æ—Å—Ç–∞—è ¬´–¥–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª—è¬ª =====
async def demo_strategy_loop():
    """
    –ó–∞–≥–ª—É—à–∫–∞ ¬´–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ #9¬ª: —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏.
    –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤.
    """
    trade_id = 1
    while True:
        # TODO: —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é #9 (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ç.–¥.)
        await asyncio.sleep(12)  # –ü–µ—Ä–∏–æ–¥ ¬´–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–∞¬ª

        symbol = "BTC/USDT"
        side = "BUY" if trade_id % 2 else "SELL"
        qty = 0.001
        price = 60000 + trade_id * 10  # –¥–ª—è –¥–µ–º–æ: ¬´—Ü–µ–Ω–∞¬ª
        ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

        if DRY_RUN:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏
            logger.info(f"[DEMO] Executed {side} {qty} {symbol} @ {price}")
            await tg_send(
                f"üß™ *DEMO trade* #{trade_id}\n"
                f"‚Ä¢ *{side}* `{qty}` `{symbol}` @ `{price}`\n"
                f"‚Ä¢ –í—Ä–µ–º—è: `{ts}`\n"
                f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: *#9*\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: *–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞*"
            )
        else:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä MEXC) –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á—ë—Ç
            pass

        trade_id += 1


async def run_bot():
    logger.info("ü§ñ mybot9 started successfully!")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (polling)
    global tg_app
    if TELEGRAM_TOKEN:
        tg_app = Application.builder().token(TELEGRAM_TOKEN).build()
        tg_app.add_handler(CommandHandler("start", cmd_start))
        tg_app.add_handler(CommandHandler("ping", cmd_ping))

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:
        await tg_app.initialize()
        await tg_app.start()
        logger.info("Telegram polling started")
    else:
        logger.warning("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî Telegram-–±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ª—É–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategy_task = asyncio.create_task(demo_strategy_loop())

    # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å
    try:
        while True:
            await asyncio.sleep(5)
            logger.info("Bot is alive... waiting for signals")
    finally:
        strategy_task.cancel()
        if tg_app:
            await tg_app.stop()
            await tg_app.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.warning("Bot stopped manually.")
