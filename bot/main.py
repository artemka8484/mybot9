# bot/main.py
import os
import asyncio
import json
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timezone

import numpy as np
import pandas as pd
import httpx
from loguru import logger
from telegram import Bot

# -----------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ ENV
# -----------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
TELEGRAM_CHAT_ID = int(os.getenv("TELEGRAM_CHAT_ID", "0"))
DEMO_MODE = os.getenv("DEMO_MODE", "true").lower() in {"1", "true", "yes", "on"}
DEBUG_TELEMETRY = os.getenv("DEBUG_TELEMETRY", "0") in {"1", "true", "yes", "on"}
TRADE_SIZE = float(os.getenv("TRADE_SIZE", "0.001"))

# –ü–∞—Ä—ã: —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,XRPUSDT"
PAIRS = [
    p.strip().upper()
    for p in os.getenv(
        "PAIRS", "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,XRPUSDT"
    ).split(",")
    if p.strip()
]

# –¢–∞–π–º—Ñ—Ä–µ–π–º: "1m", "5m", "15m" ... (–¥–ª—è MEXC)
TIMEFRAME = os.getenv("TIMEFRAME", "1m").lower()

# –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ (—Å–µ–∫). –î–µ–ª–∞–µ–º –∫–æ—Ä–æ—á–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.
TF_TO_SECONDS = {
    "1m": 60,
    "3m": 180,
    "5m": 300,
    "15m": 900,
    "30m": 1800,
    "1h": 3600,
}
CYCLE_SLEEP = max(5, min(20, TF_TO_SECONDS.get(TIMEFRAME, 60) // 3))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç
tg_bot: Bot | None = None


# -----------------------
# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck (–ø–æ—Ä—Ç 8080)
# -----------------------
class _Ping(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/":
            self.send_response(200)
            self.send_header("Content-type", "text/plain; charset=utf-8")
            self.end_headers()
            self.wfile.write(b"ok")
        else:
            self.send_error(404)

    def log_message(self, *_args, **_kwargs):
        # –≥–ª—É—à–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∞–º http.server
        return


def _run_http():
    srv = HTTPServer(("0.0.0.0", 8080), _Ping)
    logger.info("HTTP health server started on :8080")
    srv.serve_forever()


# -----------------------
# –•–µ–ª–ø–µ—Ä—ã
# -----------------------
async def send_telegram(text: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        await tg_bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
    except Exception as e:
        logger.error(f"Telegram send failed: {e}")


async def fetch_klines(symbol: str, interval: str, limit: int = 120) -> pd.DataFrame:
    """
    –ë–µ—Ä—ë–º —Å–≤–µ—á–∏ —Å MEXC (v3), —Ñ–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞: 8 –ø–æ–ª–µ–π –Ω–∞ —Å–≤–µ—á—É.
    https://api.mexc.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=120
    """
    url = "https://api.mexc.com/api/v3/klines"
    params = {"symbol": symbol, "interval": interval, "limit": str(limit)}
    async with httpx.AsyncClient(timeout=15) as client:
        r = await client.get(url, params=params)
        r.raise_for_status()
        data = r.json()  # list[list]
    # MEXC kline -> 8 –∫–æ–ª–æ–Ω–æ–∫
    cols = [
        "open_time",
        "open",
        "high",
        "low",
        "close",
        "volume",
        "close_time",
        "quote_volume",
    ]
    df = pd.DataFrame(data, columns=cols)
    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    for c in ["open", "high", "low", "close", "volume", "quote_volume"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df["open_time"] = pd.to_datetime(df["open_time"], unit="ms", utc=True)
    df["close_time"] = pd.to_datetime(df["close_time"], unit="ms", utc=True)
    return df


def ema(series: pd.Series, length: int) -> pd.Series:
    return series.ewm(span=length, adjust=False).mean()


def candle_patterns(df: pd.DataFrame) -> dict:
    """
    –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ (–∏–≥—Ä—É—à–µ—á–Ω—ã–µ) –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:
    - –±—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ
    - –º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ
    - –º–æ–ª–æ—Ç
    - –ø–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞
    """
    if len(df) < 3:
        return {"bull_engulf": False, "bear_engulf": False, "hammer": False, "shooting": False}

    c1_open, c1_close, c1_high, c1_low = (
        float(df["open"].iloc[-2]),
        float(df["close"].iloc[-2]),
        float(df["high"].iloc[-2]),
        float(df["low"].iloc[-2]),
    )
    c2_open, c2_close, c2_high, c2_low = (
        float(df["open"].iloc[-1]),
        float(df["close"].iloc[-1]),
        float(df["high"].iloc[-1]),
        float(df["low"].iloc[-1]),
    )

    # engulfing: —Ç–µ–ª–æ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –¥–ª–∏–Ω–Ω–µ–µ –∏ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥.—Ç–µ–ª–æ
    bull_engulf = (c2_close > c2_open) and (c1_close < c1_open) and (c2_close >= c1_open) and (c2_open <= c1_close)
    bear_engulf = (c2_close < c2_open) and (c1_close > c1_open) and (c2_open >= c1_close) and (c2_close <= c1_open)

    # hammer / shooting star: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–µ–Ω–µ–π (–æ—á–µ–Ω—å –≥—Ä—É–±–æ)
    body = abs(c2_close - c2_open)
    upper = c2_high - max(c2_close, c2_open)
    lower = min(c2_close, c2_open) - c2_low

    hammer = (lower > body * 2) and (upper < body * 0.5)
    shooting = (upper > body * 2) and (lower < body * 0.5)

    return {
        "bull_engulf": bool(bull_engulf),
        "bear_engulf": bool(bear_engulf),
        "hammer": bool(hammer),
        "shooting": bool(shooting),
    }


def strategy9(df: pd.DataFrame) -> tuple[str | None, dict]:
    """
    –ü—Ä–∞–≤–∏–ª–∞ #9:
    - EMA48, EMA14
    - –£–≥–æ–ª (–Ω–∞–∫–ª–æ–Ω) EMA48 –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 5 –±–∞—Ä–∞–º
    - –°–∏–≥–Ω–∞–ª BUY: –Ω–∞–∫–ª–æ–Ω > 0 –∏ (bull_engulf –∏–ª–∏ hammer)
    - –°–∏–≥–Ω–∞–ª SELL: –Ω–∞–∫–ª–æ–Ω < 0 –∏ (bear_engulf –∏–ª–∏ shooting)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (signal, info)
    """
    if len(df) < 60:
        return None, {}

    df = df.copy()
    df["ema14"] = ema(df["close"], 14)
    df["ema48"] = ema(df["close"], 48)

    # –ù–∞–∫–ª–æ–Ω EMA48: –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ—á–∫–∞–º
    tail = df["ema48"].tail(5).to_numpy(dtype=float)
    x = np.arange(len(tail), dtype=float)
    slope = float(np.polyfit(x, tail, 1)[0])  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏ x

    patt = candle_patterns(df)

    signal = None
    if slope > 0 and (patt["bull_engulf"] or patt["hammer"]):
        signal = "BUY"
    elif slope < 0 and (patt["bear_engulf"] or patt["shooting"]):
        signal = "SELL"

    info = {
        "last_close": float(df["close"].iloc[-1]),
        "ema48_slope_5": float(slope),
        "patt": {k: bool(v) for k, v in patt.items()},  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ bool
    }
    return signal, info


async def execute_demo(symbol: str, side: str, price: float):
    """–§–µ–π–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–¥–µ–º–æ)."""
    ts = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    text = (
        f"üß™ DEMO trade ‚Ä¢ {symbol}"
        f"\n‚Ä¢ {side} {TRADE_SIZE:g} @ {price:.4f}"
        f"\n‚Ä¢ –í—Ä–µ–º—è: {ts}"
        f"\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: #9"
        f"\n‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"
    )
    await send_telegram(text)


async def run_pair(symbol: str):
    """–¶–∏–∫–ª –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ."""
    pos_open = False  # –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    await send_telegram(f"‚úÖ mybot9 running (DEMO) PAIR: {symbol} TF: {TIMEFRAME}")

    while True:
        try:
            df = await fetch_klines(symbol, TIMEFRAME, limit=150)
            signal, info = strategy9(df)

            # DEBUG-–≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if DEBUG_TELEMETRY:
                patt = info.get("patt", {})
                # json.dumps –ø–∞–¥–∞–ª –Ω–∞ numpy.bool_ -> –ø—Ä–∏–≤–æ–¥–∏–º –∑–∞—Ä–∞–Ω–µ–µ
                patt = {k: bool(v) for k, v in patt.items()}
                debug_text = (
                    "üß™ DEBUG"
                    f"\n‚Ä¢ pair: {symbol}"
                    f"\n‚Ä¢ last_close: {float(info.get('last_close', 0)):.5f}"
                    f"\n‚Ä¢ EMA48_slope(5 bars): {float(info.get('ema48_slope_5', 0)):.6f}"
                    f"\n‚Ä¢ patterns: {json.dumps(patt, ensure_ascii=False)}"
                    f"\n‚Ä¢ pos_open: {bool(pos_open)}"
                )
                await send_telegram(debug_text)

            # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –¥–µ–º–æ)
            if signal == "BUY" and not pos_open:
                await execute_demo(symbol, "BUY", float(info.get("last_close", 0.0)))
                pos_open = True
            elif signal == "SELL" and pos_open:
                await execute_demo(symbol, "SELL", float(info.get("last_close", 0.0)))
                pos_open = False

        except Exception as e:
            # –õ–æ–≥ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            logger.exception(e)
            await send_telegram(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ –ø–∞—Ä–µ {symbol}: {e}")

        await asyncio.sleep(CYCLE_SLEEP)


async def run_bot():
    global tg_bot
    logger.info("ü§ñ mybot9 started successfully!")
    if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
        tg_bot = Bot(TELEGRAM_TOKEN)
        mode_note = "(DEMO mode active)" if DEMO_MODE else "(LIVE)"
        await send_telegram(f"‚úÖ mybot9 is running with strategy #9 {mode_note}")
    else:
        logger.warning("TELEGRAM_* –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º
    tasks = []
    delay = 0
    for p in PAIRS:
        # –ù–µ–±–æ–ª—å—à–æ–π —Å–¥–≤–∏–≥ —Å—Ç–∞—Ä—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Ñ–µ—Ç—á–∏—Ç—å –≤—Å—ë –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        async def _delayed(pair=p, d=delay):
            await asyncio.sleep(d)
            await run_pair(pair)
        tasks.append(asyncio.create_task(_delayed()))
        delay += 2  # –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã —Å–¥–≤–∏–≥–∞

    await asyncio.gather(*tasks)


if __name__ == "__main__":
    # HTTP health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=_run_http, daemon=True).start()
    asyncio.run(run_bot())
