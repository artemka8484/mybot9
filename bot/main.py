# bot/main.py
# -*- coding: utf-8 -*-
"""
mybot9 ‚Äî –ø—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ç–µ—Å—Ç #9):
- –ü–∞—Ä—ã –∏–∑ ENV (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT, ETHUSDT)
- –¢–∞–π–º—Ñ—Ä–µ–π–º: –∏–∑ ENV (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 5m)
- TP —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (TP_PCT, –Ω–∞–ø—Ä. 0.0035 = 0.35%)
- SL = ATR * ATR_MULT_SL
- –í—Ö–æ–¥ –ø–æ 6 –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º + —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞ EMA100 slope (EMA_SLOPE_BARS)
- –ñ—ë—Å—Ç–∫–∏–π ¬´trend guard¬ª: LONG —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ slope>0, SHORT ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ slope<0
- –†–∏—Å–∫ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (RISK_PCT), –ø–ª–µ—á–æ (LEVERAGE), –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ FEE_PCT
- –ö—É–ª–¥–∞—É–Ω COOLDOWN_SEC –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
- –¢–µ–ª–µ–≥—Ä–∞–º: /start, /status
"""

import os, time, threading, math, json, traceback
from datetime import datetime, timezone
from typing import Dict, Any, Optional, List, Tuple

import requests
import numpy as np
import pandas as pd

from telegram import ParseMode
from telegram.ext import Updater, CommandHandler

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
CHAT_ID = int(os.getenv("TELEGRAM_CHAT_ID", "0") or "0")

PAIRS = [s.strip().upper() for s in os.getenv("PAIRS", "BTCUSDT,ETHUSDT").split(",") if s.strip()]
TIMEFRAME = os.getenv("TIMEFRAME", "5m").lower()  # 1m/3m/5m/15m/1h...
TICK_SEC = int(os.getenv("TICK_SEC", "10"))       # —á–∞—Å—Ç–æ—Ç–∞ —Ü–∏–∫–ª–∞
COOLDOWN_SEC = int(os.getenv("COOLDOWN_SEC", "240"))

EMA_LEN = int(os.getenv("EMA_LEN", "100"))
EMA_SLOPE_BARS = int(os.getenv("EMA_SLOPE_BARS", "8"))
ATR_LEN = int(os.getenv("ATR_LEN", "14"))
ATR_MULT_SL = float(os.getenv("ATR_MULT_SL", "1"))   # SL = ATR*mult

TP_PCT = float(os.getenv("TP_PCT", "0.0035"))        # 0.35% –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
RISK_PCT = float(os.getenv("RISK_PCT", "1"))         # % —Ä–∏—Å–∫–∞ –æ—Ç equity –Ω–∞ —Å–¥–µ–ª–∫—É
LEVERAGE = float(os.getenv("LEVERAGE", "5"))
FEE_PCT = float(os.getenv("FEE_PCT", "0.0006"))      # 0.06% (2 —Å—Ç–æ—Ä–æ–Ω—ã ~0.12%)

MODE = os.getenv("MODE", "DEMO").upper()
DEMO_MODE = os.getenv("DEMO_MODE", "true").lower() == "true"
DEMO_START_BALANCE = float(os.getenv("DEMO_START_BALANCE", "5000"))

DAILY_SUMMARY = os.getenv("DAILY_SUMMARY", "1") == "1"

BINANCE_BASE = "https://api.binance.com"  # –ø—É–±–ª–∏—á–Ω—ã–µ —Å–≤–µ—á–∏ –±–µ—Ä—ë–º —É Binance

# ---------- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
state_lock = threading.Lock()
state: Dict[str, Any] = {
    "equity": DEMO_START_BALANCE,
    "start_equity": DEMO_START_BALANCE,
    "pairs": {},
    "day_anchor": datetime.now(timezone.utc).date(),
}
for p in PAIRS:
    state["pairs"][p] = {
        "pos": None,               # dict|None
        "last_entry_ts": 0,
        "stats": {"trades": 0, "wins": 0, "pnl": 0.0},
    }

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def now_utc() -> datetime:
    return datetime.now(timezone.utc)

def tf_to_binance_interval(tf: str) -> str:
    return tf

def send(msg: str):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("[TG disabled]", msg)
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={"chat_id": CHAT_ID, "text": msg, "parse_mode": "HTML", "disable_web_page_preview": True},
            timeout=10,
        )
    except Exception as e:
        print("Telegram error:", e)

def fmt_pct(x):
    return f"{x*100:.2f}%"

def fmt_num(x):
    return f"{x:.5f}"

# ---------- –ú–∞—Ä–∫–µ—Ç –¥–∞–Ω–Ω—ã–µ ----------
def fetch_klines(pair: str, limit: int = 500) -> Optional[pd.DataFrame]:
    """
    –°–≤–µ—á–∏ —Å Binance: openTime, open, high, low, close, volume, ...
    """
    url = f"{BINANCE_BASE}/api/v3/klines"
    params = {"symbol": pair, "interval": tf_to_binance_interval(TIMEFRAME), "limit": limit}
    try:
        r = requests.get(url, params=params, timeout=10)
        if r.status_code != 200:
            return None
        data = r.json()
        if not data:
            return None
        cols = ["t","open","high","low","close","vol","ct","qv","n","tbav","tbqv","i"]
        df = pd.DataFrame(data, columns=cols)[["t","open","high","low","close","vol"]]
        for c in ["open","high","low","close","vol"]:
            df[c] = df[c].astype(float)
        df["t"] = pd.to_datetime(df["t"], unit="ms", utc=True)
        return df
    except Exception:
        return None

def talib_basic(df: pd.DataFrame) -> pd.DataFrame:
    # EMA
    df["ema"] = df["close"].ewm(span=EMA_LEN, adjust=False).mean()
    # ATR (True Range)
    hl = df["high"] - df["low"]
    hc = (df["high"] - df["close"].shift(1)).abs()
    lc = (df["low"] - df["close"].shift(1)).abs()
    tr = pd.concat([hl, hc, lc], axis=1).max(axis=1)
    df["atr"] = tr.rolling(ATR_LEN).mean()
    # slope ema –∑–∞ N –±–∞—Ä–æ–≤
    df["ema_slope"] = df["ema"] - df["ema"].shift(EMA_SLOPE_BARS)
    return df

# ---------- –ü–∞—Ç—Ç–µ—Ä–Ω—ã (6 —à—Ç—É–∫) ----------
def pattern_signals(df: pd.DataFrame) -> Dict[str, bool]:
    """
    –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä (= -2, —Ç.–∫. -1 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏—Ä–∂),
    –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º -2.
    """
    if len(df) < 10:
        return {"bull_engulf": False, "bear_engulf": False, "hammer": False, "shooting_star": False, "breakout_up": False, "breakout_down": False}
    i = -2
    o, h, l, c = df["open"].iloc[i], df["high"].iloc[i], df["low"].iloc[i], df["close"].iloc[i]
    op, hp, lp, cp = df["open"].iloc[i-1], df["high"].iloc[i-1], df["low"].iloc[i-1], df["close"].iloc[i-1]

    body = abs(c-o)
    rng = h-l + 1e-12
    upper = h - max(c, o)
    lower = min(c, o) - l

    # 1) Bullish Engulfing
    bull_engulf = (cp > op) is False and (c > o) and (c >= op) and (o <= cp)
    # 2) Bearish Engulfing
    bear_engulf = (cp < op) is False and (c < o) and (c <= op) and (o >= cp)
    # 3) Hammer (–º–∞–ª–æ–µ —Ç–µ–ª–æ —Å–≤–µ—Ä—Ö—É, –¥–ª–∏–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å)
    hammer = (c > o) and (lower / rng > 0.55) and (upper / rng < 0.2)
    # 4) Shooting star (–º–∞–ª–æ–µ —Ç–µ–ª–æ —Å–Ω–∏–∑—É, –¥–ª–∏–Ω–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å)
    shooting_star = (c < o) and (upper / rng > 0.55) and (lower / rng < 0.2)
    # 5) Breakout up (–ø—Ä–æ–±–æ–π –º–∞–∫—Å–∏–º—É–º–∞ N –±–∞—Ä–æ–≤)
    N = 20
    breakout_up = c > df["high"].iloc[-N-2:-2].max()
    # 6) Breakout down
    breakout_down = c < df["low"].iloc[-N-2:-2].min()

    return {
        "bull_engulf": bool(bull_engulf),
        "bear_engulf": bool(bear_engulf),
        "hammer": bool(hammer),
        "shooting_star": bool(shooting_star),
        "breakout_up": bool(breakout_up),
        "breakout_down": bool(breakout_down),
    }

# ---------- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ ----------
def decide_entry(df: pd.DataFrame) -> Optional[Tuple[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (side, reason) –∏–ª–∏ None.
    """
    sig = pattern_signals(df)
    slope = df["ema_slope"].iloc[-2]

    # –ø–µ—Ä–≤–∏—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    long_trigs = [sig["bull_engulf"], sig["hammer"], sig["breakout_up"]]
    short_trigs = [sig["bear_engulf"], sig["shooting_star"], sig["breakout_down"]]

    if any(long_trigs):
        side = "LONG"
        reason = ", ".join([k for k, v in sig.items() if v and k in ["bull_engulf","hammer","breakout_up"]])
    elif any(short_trigs):
        side = "SHORT"
        reason = ", ".join([k for k, v in sig.items() if v and k in ["bear_engulf","shooting_star","breakout_down"]])
    else:
        return None

    # === TREND GUARD (–∂—ë—Å—Ç–∫–æ –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ #9) ===
    if side == "LONG" and slope <= 0:
        return None
    if side == "SHORT" and slope >= 0:
        return None

    return side, reason

def position_size(pair: str, price: float) -> float:
    with state_lock:
        eq = state["equity"]
    risk_cash = eq * (RISK_PCT / 100.0)
    # –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö —Å –ø–ª–µ—á–æ–º –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Ä–∏—Å–∫ -> –ø—Ä–∏–±–ª–∏–∑–∏–º qty —Ç–∞–∫,
    # —á—Ç–æ–±—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø–æ SL (–≤ %) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª risk_cash.
    # –ï—Å–ª–∏ SL —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ ATR * mult -> –¥–µ–ª—å—Ç–∞ —Ü–µ–Ω—ã sl_dist
    sl_dist = max(1e-8, state["pairs"][pair].get("last_atr", 0.0) * ATR_MULT_SL)
    # —Ä–∏—Å–∫ ~ qty * sl_dist
    qty = risk_cash / sl_dist
    # —É—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–µ—á–æ (–Ω–∞ —Ñ—å—é—á–∞—Ö –º–∞—Ä–∂–∞ ~ price*qty/leverage)
    # –î–ª—è –¥–µ–º–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫–≤–∏—Ç–∏:
    max_qty_by_leverage = (eq * LEVERAGE) / max(price, 1e-8)
    qty = min(qty, max_qty_by_leverage)
    return max(qty, 0.0)

def open_position(pair: str, side: str, price: float, df: pd.DataFrame, reason: str):
    atr = float(df["atr"].iloc[-2])
    with state_lock:
        st = state["pairs"][pair]
        if st["pos"] is not None:
            return
        # cooldown
        if time.time() - st["last_entry_ts"] < COOLDOWN_SEC:
            return
        st["last_atr"] = atr
    qty = position_size(pair, price)
    if qty <= 0:
        return
    # —Ü–µ–ª–∏
    if side == "LONG":
        tp = price * (1 + TP_PCT)
        sl = price - ATR_MULT_SL * atr
    else:
        tp = price * (1 - TP_PCT)
        sl = price + ATR_MULT_SL * atr

    pos = {
        "side": side, "entry": price, "qty": qty,
        "tp": tp, "sl": sl, "ts": time.time(), "reason": reason
    }
    with state_lock:
        state["pairs"][pair]["pos"] = pos
        state["pairs"][pair]["last_entry_ts"] = time.time()

    send(
        "üî¥ <b>OPEN {pair} {side}</b>\n"
        "‚Ä¢ time: {t}\n"
        "‚Ä¢ entry: {entry:.5f}\n"
        "‚Ä¢ qty: {qty:.6f}\n"
        "‚Ä¢ TP: {tp:.5f}   SL: {sl:.5f}\n"
        "‚Ä¢ signal: {reason}, slope {slope:.5f}, ATR {atr:.5f}\n"
        "‚Ä¢ mode: {mode}".format(
            pair=pair, side=side, t=now_utc().strftime("%Y-%m-%d %H:%M:%S UTC"),
            entry=price, qty=qty, tp=tp, sl=sl, reason=reason,
            slope=df["ema_slope"].iloc[-2], atr=atr, mode="DEMO" if DEMO_MODE else "LIVE"
        )
    )

def close_position(pair: str, exit_price: float, tag: str):
    with state_lock:
        pos = state["pairs"][pair]["pos"]
        if pos is None:
            return
        side = pos["side"]
        entry = pos["entry"]
        qty = pos["qty"]
        # PnL (–±–µ–∑ —É—á—ë—Ç–∞ —Ñ–∏ –∏ –ø–ª–µ—á–æ —É–∂–µ –≤ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏)
        pnl = (exit_price - entry) * qty if side == "LONG" else (entry - exit_price) * qty
        # –∫–æ–º–∏—Å—Å–∏–∏ (2 —Å—Ç–æ—Ä–æ–Ω—ã)
        fee = (abs(entry) + abs(exit_price)) * qty * FEE_PCT
        pnl -= fee
        # –æ–±–Ω–æ–≤–ª—è–µ–º equity
        state["equity"] += pnl
        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st = state["pairs"][pair]["stats"]
        st["trades"] += 1
        st["pnl"] += pnl
        if pnl > 0:
            st["wins"] += 1
        state["pairs"][pair]["pos"] = None

        total_trades = sum(state["pairs"][p]["stats"]["trades"] for p in state["pairs"])
        total_wins = sum(state["pairs"][p]["stats"]["wins"] for p in state["pairs"])
        total_pnl = sum(state["pairs"][p]["stats"]["pnl"] for p in state["pairs"])
        wr_pair = (st["wins"] / st["trades"] * 100.0) if st["trades"] else 0.0
        wr_total = (total_wins / total_trades * 100.0) if total_trades else 0.0
        delta = state["equity"] - state["start_equity"]
        delta_pct = 100.0 * (delta / state["start_equity"])

    mark = "‚úÖ" if pnl > 0 else "‚ùå"
    send(
        "{mark} <b>CLOSE {pair} ({tag})</b>\n"
        "‚Ä¢ time: {t}\n"
        "‚Ä¢ exit: {exit:.5f}\n"
        "‚Ä¢ PnL: {pnl:+.5f}\n"
        "‚Ä¢ pair stats: trades {pt}, WR {pwr:.2f}%, PnL {ppnl:.5f}\n"
        "‚Ä¢ total: trades {tt}, WR {twr:.2f}%, PnL {tpnl:.5f}\n"
        "‚Ä¢ balance: {eq:.5f}  (Œî {d:+.5f} | {dp:.2f}%)\n"
        "‚Ä¢ since start: {dp:.2f}%   (lev {lev:.1f}x, fee {fee:.3f}%)".format(
            mark=mark, pair=pair, tag=tag, t=now_utc().strftime("%Y-%m-%d %H:%M:%S UTC"),
            exit=exit_price, pnl=pnl,
            pt=st["trades"], pwr=wr_pair, ppnl=st["pnl"],
            tt=total_trades, twr=wr_total, tpnl=total_pnl,
            eq=state["equity"], d=delta, dp=delta_pct, lev=LEVERAGE, fee=FEE_PCT*100
        )
    )

def check_exit(pair: str, last_price: float):
    with state_lock:
        pos = state["pairs"][pair]["pos"]
    if not pos:
        return
    if pos["side"] == "LONG":
        if last_price >= pos["tp"]:
            close_position(pair, pos["tp"], "TP")
        elif last_price <= pos["sl"]:
            close_position(pair, pos["sl"], "SL")
    else:
        if last_price <= pos["tp"]:
            close_position(pair, pos["tp"], "TP")
        elif last_price >= pos["sl"]:
            close_position(pair, pos["sl"], "SL")

# ---------- –¶–∏–∫–ª –ø–æ –ø–∞—Ä–µ ----------
def pair_loop(pair: str):
    send(f"‚úÖ Loop started for <b>{pair}</b>")
    while True:
        try:
            df = fetch_klines(pair, limit=500)
            if df is None or len(df) < max(ATR_LEN, EMA_LEN)+EMA_SLOPE_BARS+5:
                send(f"‚ö†Ô∏è {pair} loop error: no  klines  for {pair}")
                time.sleep(TICK_SEC)
                continue

            df = talib_basic(df)
            last_price = float(df["close"].iloc[-1])

            # 1) –í—ã—Ö–æ–¥ –ø–æ TP/SL
            check_exit(pair, last_price)

            # 2) –í—Ö–æ–¥ (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç)
            with state_lock:
                has_pos = state["pairs"][pair]["pos"] is not None
            if not has_pos:
                dec = decide_entry(df)
                if dec:
                    side, reason = dec
                    open_position(pair, side, float(df["close"].iloc[-2]), df, reason)

            # 3) –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ (UTC)
            if DAILY_SUMMARY:
                with state_lock:
                    if state["day_anchor"] != now_utc().date():
                        state["day_anchor"] = now_utc().date()
                        send(status_text())

        except Exception as e:
            print(f"{pair} loop error:", e)
            traceback.print_exc()
        time.sleep(TICK_SEC)

# ---------- –ö–æ–º–∞–Ω–¥—ã TG ----------
def status_text() -> str:
    with state_lock:
        lines = [f"üìä <b>STATUS {now_utc().strftime('%Y-%m-%d %H:%M:%S UTC')}</b>"]
        total_tr, total_wins, total_pnl = 0, 0, 0.0
        for pair, ps in state["pairs"].items():
            st = ps["stats"]
            pos = ps["pos"]
            total_tr += st["trades"]; total_wins += st["wins"]; total_pnl += st["pnl"]
            wr = (st["wins"]/st["trades"]*100.0) if st["trades"] else 0.0
            lines.append(f"<b>{pair}</b> ‚Ä¢ trades: {st['trades']}  WR: {wr:.2f}%  PnL: {fmt_num(st['pnl'])}")
            if pos:
                lines.append(f"{pos['qty']:.6f}  pos: <b>{pos['side']}</b> @ {pos['entry']:.5f} (TP {pos['tp']:.5f} / SL {pos['sl']:.5f})")
            else:
                lines.append("0.00000  pos: ‚Äî")
        twr = (total_wins/total_tr*100.0) if total_tr else 0.0
        lines.append("‚Äî")
        lines.append(f"<b>TOTAL</b> ‚Ä¢ trades: {total_tr}  WR: {twr:.2f}%  PnL: {fmt_num(total_pnl)}")
        delta = state["equity"] - state["start_equity"]
        dp = 100.0 * delta / state["start_equity"]
        lines.append(f"equity: {state['equity']:.5f}  ({dp:.2f}% —Å –Ω–∞—á–∞–ª–∞)")
        lines.append(f"leverage: {LEVERAGE:.1f}x  fee: {FEE_PCT*100:.3f}%")
    return "\n".join(lines)

def cmd_start(update, context):
    msg = (
        "ü§ñ <b>mybot9 started successfully!</b>\n"
        f"Mode: <b>{'DEMO' if DEMO_MODE else 'LIVE'}</b> | Leverage <b>{LEVERAGE:.1f}x</b> | Fee <b>{FEE_PCT*100:.3f}%</b> | "
        f"Risk <b>{RISK_PCT:.1f}%</b>\n"
        f"Pairs: {', '.join(PAIRS)} | TF <b>{TIMEFRAME}</b> | Tick <b>{TICK_SEC}s</b>\n"
        f"Balance: {state['equity']:.2f}  USDT"
    )
    send(msg)
    update.message.reply_text("ok")

def cmd_status(update, context):
    update.message.reply_text(status_text(), parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# ---------- Main ----------
def main():
    # Telegram
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", cmd_start))
    dp.add_handler(CommandHandler("status", cmd_status))

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–º
    for p in PAIRS:
        th = threading.Thread(target=pair_loop, args=(p,), daemon=True)
        th.start()

    # –ü–æ–ª–ª–∏–Ω–≥. –í Koyeb/Heroku –∏–Ω–æ–≥–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç.
    # drop_pending_updates=True –∞–Ω–∞–ª–æ–≥ clean=True, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –∞–ø–¥–µ–π—Ç–∞—Ö.
    try:
        updater.start_polling(drop_pending_updates=True)
        # ping-—Å–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è (best-effort), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–π –ø–æ—Ä—Ç
        try:
            import http.server, socketserver
            class Quiet(http.server.SimpleHTTPRequestHandler):
                def log_message(self, *a): pass
            PORT = 8080
            def serve():
                with socketserver.TCPServer(("0.0.0.0", PORT), Quiet) as httpd:
                    httpd.serve_forever()
            threading.Thread(target=serve, daemon=True).start()
        except Exception:
            pass
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        send(
            "ü§ñ <b>mybot9 started successfully!</b>\n"
            f"Mode: <b>{'DEMO' if DEMO_MODE else 'LIVE'}</b> | Leverage <b>{LEVERAGE:.1f}x</b> | Fee <b>{FEE_PCT*100:.3f}%</b> | Risk <b>{RISK_PCT:.1f}%</b>\n"
            f"Pairs: {', '.join(PAIRS)} | TF <b>{TIMEFRAME}</b> | Tick <b>{TICK_SEC}s</b>\n"
            f"Balance: {state['equity']:.2f}  USDT"
        )
        updater.idle()
    except Exception as e:
        # –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –∫—Ä—É—Ç–∏—Ç—Å—è –≤—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç–∞–Ω—Å ‚Äî Telegram –≤–µ—Ä–Ω—ë—Ç Conflict.
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ñ–æ–Ω—ã (–±–æ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç/—à–ª—ë—Ç send() —á–µ—Ä–µ–∑ API).
        send(f"‚ö†Ô∏è Telegram polling error: {e}")

if __name__ == "__main__":
    main()
