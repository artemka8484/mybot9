# bot/main.py
# -*- coding: utf-8 -*-

import os
import sys
import time
import json
import queue
import math
import signal
import random
import logging
import threading
from dataclasses import dataclass, field
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional

# === telegram v13 ===
from telegram import ParseMode, Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext

# -----------------------------
#            CONFIG
# -----------------------------

ENV = os.getenv

TELEGRAM_TOKEN   = ENV("TELEGRAM_TOKEN", "").strip()
TELEGRAM_CHAT_ID = ENV("TELEGRAM_CHAT_ID", "").strip()
USE_WEBHOOK      = ENV("USE_WEBHOOK", "1") == "1"
PUBLIC_URL       = ENV("PUBLIC_URL", "").strip()
WEBHOOK_SECRET   = ENV("WEBHOOK_SECRET", "hook").strip()
PORT             = int(ENV("PORT", "8080"))

# —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º ENV)
PAIRS      = [p.strip() for p in ENV("PAIRS", "BTCUSDT,ETHUSDT").split(",") if p.strip()]
TIMEFRAME  = ENV("TIMEFRAME", "5m")
RISK_PCT   = float(ENV("RISK_PCT", "1"))
TP_PCT     = float(ENV("TP_PCT", "0.35"))
ATR_LEN    = int(ENV("ATR_LEN", "14"))
ATR_MULT   = float(ENV("ATR_MULT_SL", "1"))
EMA_LEN    = int(ENV("EMA_LEN", "100"))
EMA_SLOPE  = int(ENV("EMA_SLOPE_BARS", "8"))
COOLDOWN_S = int(ENV("COOLDOWN_SEC", "240"))
FEE_PCT    = float(ENV("FEE_PCT", "0.0006"))
LEVERAGE   = float(ENV("LEVERAGE", "5"))
TZ_NAME    = ENV("TX", "UTC")

DEMO_MODE  = ENV("DEMO_MODE", "true").lower() == "true"
DRY_RUN    = ENV("DRY_RUN", "false").lower() == "true"
DEMO_BAL   = float(ENV("DEMO_START_BALANCE", "5000"))
DAILY_SUM  = ENV("DAILY_SUMMARY", "1") == "1"

# –ª–æ–≥
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
log = logging.getLogger("bot")

# -----------------------------
#      STATE & DATA MODELS
# -----------------------------

@dataclass
class Position:
    side: str            # LONG / SHORT
    entry: float
    tp: float
    sl: float
    qty: float
    opened_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))

@dataclass
class PairStats:
    trades: int = 0
    wins: int = 0
    pnl: float = 0.0
    last_trade_ts: float = 0.0
    pos: Optional[Position] = None

@dataclass
class GlobalState:
    equity: float = DEMO_BAL
    pairs: Dict[str, PairStats] = field(default_factory=dict)
    started_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    lock: threading.Lock = field(default_factory=threading.Lock)
    stop_event: threading.Event = field(default_factory=threading.Event)
    tz: timezone = timezone.utc

STATE = GlobalState()
for p in PAIRS:
    STATE.pairs[p] = PairStats()

# -----------------------------
#      UTILS / HELPERS
# -----------------------------

def tz_now() -> datetime:
    return datetime.now(STATE.tz)

def pct(a: float) -> str:
    return f"{a:.2f}%"

def fmt(v: float) -> str:
    return f"{v:.5f}".rstrip("0").rstrip(".")

def human_equity() -> str:
    with STATE.lock:
        delta = STATE.equity - DEMO_BAL
        d_pct = (delta / DEMO_BAL * 100) if DEMO_BAL else 0
        return f"{STATE.equity:.2f}  ({d_pct:+.2f}% —Å –Ω–∞—á–∞–ª–∞)"

def thread_name(pair: str) -> str:
    return f"loop-{pair}"

# -----------------------------
#  DEMO PRICE FEED (–∑–∞–≥–ª—É—à–∫–∞)
# -----------------------------
# –ß—Ç–æ–±—ã –∫–æ–¥ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –∏ –Ω–µ –ø–∞–¥–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é
# –ø—Å–µ–≤–¥–æ-—Ü–µ–Ω—É. –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.
# –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∏–¥/–±–∏—Ä–∂–∞ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π –≤–Ω—É—Ç—Ä–∏ get_price().

_random = random.Random()

def get_price(pair: str) -> float:
    # –ø—Ä–æ—Å—Ç–∞—è –ø—Å–µ–≤–¥–æ-—Ü–µ–Ω–∞, –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –ø–∞—Ä–µ
    base = 121000 if pair.startswith("BTC") else 4300
    noise = _random.uniform(-200, 200) if pair.startswith("BTC") else _random.uniform(-10, 10)
    return max(1.0, base + noise)

# -----------------------------
#      STRATEGY (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
# -----------------------------
# –õ–æ–≥–∏–∫–∞: –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º "—Å–∏–≥–Ω–∞–ª" HAMMER
# –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞; —Å—Ç–∞–≤–∏–º TP/SL –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –∏ ATR-–º–Ω–æ–∂.
# –≠—Ç–æ –∫–∞—Ä–∫–∞—Å ‚Äî —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ—é —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.

def has_cooldown(ps: PairStats) -> bool:
    return (time.time() - ps.last_trade_ts) < COOLDOWN_S

def decide_signal(pair: str) -> Optional[Position]:
    price = get_price(pair)
    # –ø—Å–µ–≤–¥–æ-–Ω–∞–∫–ª–æ–Ω "EMA"
    slope = _random.uniform(-1, 1)
    side = "LONG" if slope >= 0 else "SHORT"
    tp = price * (1 + TP_PCT/100) if side == "LONG" else price * (1 - TP_PCT/100)
    # SL —á–µ—Ä–µ–∑ ATR_MULT (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö ~ ATR_MULT * 0.2%)
    sl_gap = 0.2 * ATR_MULT / 100
    sl = price * (1 - sl_gap) if side == "LONG" else price * (1 + sl_gap)
    # —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫—É –æ—Ç equity
    with STATE.lock:
        eq = STATE.equity
    risk_usd = eq * (RISK_PCT/100)
    # —É—Å–ª–æ–≤–Ω—ã–π —Å—Ç–æ–ø–æ–≤—ã–π —Ä–∏—Å–∫ ~ sl_gap
    per_unit_risk = price * sl_gap
    qty = max(0.00002, min(risk_usd / max(per_unit_risk, 1e-6), 10))  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –¥–µ–º–æ

    return Position(side=side, entry=price, tp=tp, sl=sl, qty=qty)

def mark_to_market(ps: PairStats, pair: str) -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –¢–ü/SL –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ."""
    if not ps.pos:
        return
    price = get_price(pair)
    pos = ps.pos
    hit_tp = price >= pos.tp if pos.side == "LONG" else price <= pos.tp
    hit_sl = price <= pos.sl if pos.side == "LONG" else price >= pos.sl
    if hit_tp or hit_sl:
        close_price = pos.tp if hit_tp else pos.sl
        pnl = (close_price - pos.entry) * pos.qty if pos.side == "LONG" else (pos.entry - close_price) * pos.qty
        fees = (pos.entry + close_price) * pos.qty * FEE_PCT
        pnl -= fees

        with STATE.lock:
            STATE.equity += pnl
            ps.trades += 1
            if pnl > 0:
                ps.wins += 1
            ps.pnl += pnl
            ps.pos = None
            ps.last_trade_ts = time.time()

        emoji = "‚úÖ" if pnl > 0 else "‚ùå"
        send_log(f"""{emoji} CLOSE {pair} ({'TP' if hit_tp else 'SL'})
‚Ä¢ time: {utcnow_str()}
‚Ä¢ exit: {fmt(close_price)}
‚Ä¢ PnL: {pnl:+.5f}
‚Ä¢ pair stats: trades {ps.trades}, WR {wr(ps):.2f}%, PnL {ps.pnl:+.5f}
‚Ä¢ total: equity {human_equity()}
‚Ä¢ since start: {since_start()}
""")

def wr(ps: PairStats) -> float:
    return (ps.wins / ps.trades * 100) if ps.trades else 0.0

def since_start() -> str:
    with STATE.lock:
        delta = STATE.equity - DEMO_BAL
        pct_delta = (delta/DEMO_BAL*100) if DEMO_BAL else 0
    return f"{pct_delta:+.2f}%"

# -----------------------------
#        BOT HANDLERS
# -----------------------------

def utcnow_str() -> str:
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def send_log(text: str):
    if TELEGRAM_CHAT_ID:
        try:
            BOT.send_message(int(TELEGRAM_CHAT_ID), text)
        except Exception as e:
            log.warning(f"send_log error: {e}")

def cmd_start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /status, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        f"Mode: {'DEMO' if DEMO_MODE else 'LIVE'} | Leverage {LEVERAGE:.1f}x | Fee {FEE_PCT*100:.3f}% | Risk {RISK_PCT:.1f}%\n"
        f"Pairs: {', '.join(PAIRS)} | TF {TIMEFRAME}"
    )

def cmd_status(update: Update, context: CallbackContext):
    lines = [f"üìä STATUS {utcnow_str()}"]
    total_trades = 0
    total_wins = 0
    total_pnl = 0.0

    with STATE.lock:
        for pair, ps in STATE.pairs.items():
            total_trades += ps.trades
            total_wins += ps.wins
            total_pnl += ps.pnl
            pos_line = "‚Äî"
            if ps.pos:
                pos = ps.pos
                pos_line = (f"{pos.qty:.6f}  pos: {pos.side} @ {fmt(pos.entry)} "
                            f"(TP {fmt(pos.tp)} / SL {fmt(pos.sl)})")
            lines.append(f"{pair} ‚Ä¢ trades: {ps.trades}  WR: {wr(ps):.2f}%  PnL: {ps.pnl:+.5f}\n{pos_line}")

    lines.append("‚Äî")
    wr_total = (total_wins/total_trades*100) if total_trades else 0.0
    lines.append(f"TOTAL ‚Ä¢ trades: {total_trades}  WR: {wr_total:.2f}%  PnL: {total_pnl:+.5f}")
    lines.append(f"equity: {human_equity()}")
    lines.append(f"leverage: {LEVERAGE:.1f}x  fee: {FEE_PCT*100:.3f}%")
    update.message.reply_text("\n".join(lines))

# -----------------------------
#        LOOPS PER PAIR
# -----------------------------

def loop_pair(pair: str):
    threading.current_thread().name = thread_name(pair)
    log.info(f"Loop started for {pair}")
    send_log(f"‚úÖ Loop started for <b>{pair}</b>",)

    ps = STATE.pairs[pair]
    while not STATE.stop_event.is_set():
        try:
            # –∑–∞–∫—Ä—ã—Ç—å –ø–æ –¢–ü/SL –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
            mark_to_market(ps, pair)

            # –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é, –µ—Å–ª–∏ –ø—É—Å—Ç–æ –∏ –Ω–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
            if (ps.pos is None) and not has_cooldown(ps):
                pos = decide_signal(pair)
                if pos:
                    with STATE.lock:
                        ps.pos = pos
                        ps.last_trade_ts = time.time()

                    send_log(f"""üî¥ OPEN {pair} {pos.side}
‚Ä¢ time: {utcnow_str()}
‚Ä¢ entry: {fmt(pos.entry)}
‚Ä¢ qty: {pos.qty:.6f}
‚Ä¢ TP: {fmt(pos.tp)}   SL: {fmt(pos.sl)}
‚Ä¢ signal: hammer, slope {random.uniform(-1,1):.5f}, ATR ~
‚Ä¢ mode: {"DEMO" if DEMO_MODE else "LIVE"}
""")
            time.sleep(10)  # Tick –∏–∑ ENV (10—Å)
        except Exception as e:
            log.exception(f"loop error {pair}: {e}")
            time.sleep(3)

# -----------------------------
#            RUN
# -----------------------------

def start_all_loops():
    for pair in PAIRS:
        t = threading.Thread(target=loop_pair, args=(pair,), daemon=True)
        t.start()

def stop_all(*_):
    STATE.stop_event.set()

def main():
    if not TELEGRAM_TOKEN:
        log.critical("TELEGRAM_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        sys.exit(1)

    # —Ç–∞–π–º–∑–æ–Ω–∞
    if TZ_NAME.upper() == "UTC":
        STATE.tz = timezone.utc

    global BOT
    BOT = Bot(TELEGRAM_TOKEN)

    updater = Updater(TELEGRAM_TOKEN, use_context=True)

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start",  cmd_start))
    dp.add_handler(CommandHandler("status", cmd_status))

    # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
    start_all_loops()

    # –í–´–ë–û–† –†–ï–ñ–ò–ú–ê: Webhook –ò–õ–ò Polling
    if USE_WEBHOOK:
        if not PUBLIC_URL:
            log.critical("PUBLIC_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ USE_WEBHOOK=1")
            sys.exit(1)

        hook_path = f"webhook/{WEBHOOK_SECRET}"
        full_url = f"{PUBLIC_URL.rstrip('/')}/{hook_path}"
        log.info(f"Setting webhook to {full_url}")

        # –í–ù–ò–ú–ê–ù–ò–ï: –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö HTTP-—Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ 8080!
        updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=hook_path,
            webhook_url=full_url,
            drop_pending_updates=True,   # –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ clean=
        )
    else:
        # –û—Ç–∫–ª—é—á–∏–º —Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏ –∑–∞–ø—É—Å—Ç–∏–º polling
        try:
            BOT.delete_webhook(drop_pending_updates=True)
        except Exception:
            pass
        log.info("Starting polling‚Ä¶")
        updater.start_polling(drop_pending_updates=True)

    signal.signal(signal.SIGINT,  stop_all)
    signal.signal(signal.SIGTERM, stop_all)
    log.info("Scheduler started")
    updater.idle()

if __name__ == "__main__":
    main()
